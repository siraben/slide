#!/usr/bin/env python3

import argparse
from argparse import RawTextHelpFormatter
import os
import sys
import signal
import subprocess
import threading
from types import SimpleNamespace


UI_PORT = "8000"
DEFAULTS = SimpleNamespace(
    filter=None,
    sys=False,
    jobs=8,
    bless=False,
    fail_todo=False,
    no_latex=False,
    open=False,
)


def slide(msg, **kwargs):
    print(f"""
     x - x
     +----|
    /
 0 /  {msg}
|-+
""", **kwargs)


def ensure(args, _unknown):
    def run_wrapped(fn):
        rc = fn()
        if rc != 0:
            sys.exit(rc)

    assurances = [
        lambda: build_project(DEFAULTS, []),
        lambda: test(DEFAULTS, []),
        lambda: lf(DEFAULTS, []),
        lambda: doc(DEFAULTS, []),
    ]
    for assurence in assurances:
        run_wrapped(assurence)

    slide("OK!")


def build_project(args, _unknown):
    process = subprocess.run(["cargo", "build", "--verbose", "--workspace"])
    return process.returncode


def test(args, runner_args):
    cargo_args = ["cargo", "test"]
    env = os.environ.copy()
    if args.sys:
        cargo_args.append("--test")
        cargo_args.append("system_tests")
    cargo_args.append("-j")
    cargo_args.append(str(args.jobs))
    for runner_arg in runner_args:
        cargo_args.append(runner_arg)
    cargo_args.append("--")
    if args.filter:
        cargo_args.append(args.filter)

    if args.bless:
        env["BLESS"] = "1"
    if args.fail_todo:
        env["FAIL_TODO"] = "1"
    if args.no_latex:
        env["NO_LATEX"] = "1"

    process = subprocess.run(cargo_args, env=env)
    return process.returncode


def www(args, _unknown):
    os.chdir('www')
    threading.Thread(
        target=lambda: subprocess.run(["python3", "-m", "http.server"]),
        daemon=True).start()
    os.chdir('../')
    print(f"Serving slide on http://localhost:{UI_PORT}...")

    subprocess.run(["./scripts/build_wasm", "--watch"])


def bench(args, _unknown):
    os.chdir("libslide")
    cargo_args = ["cargo", "bench"]
    if args.filter:
        cargo_args.append(args.filter)
    cargo_args.append("--features")
    cargo_args.append("benchmark-internals")

    process = subprocess.run(cargo_args)
    return process.returncode


def lf(args, _unknown):
    process = subprocess.run(["./scripts/check", "lf"])
    return process.returncode


def squash(args, _unknown):
    process = subprocess.run(["./scripts/squashed", "--rebase"])
    return process.returncode


def doc(args, _unknown):
    doc_args = ["./scripts/doc"]
    if args.open:
        doc_args.append("--open")
    process = subprocess.run(doc_args)
    return process.returncode


parser = argparse.ArgumentParser(
    prog="ladder",
    description="ladder: the slide development tool.",
    formatter_class=RawTextHelpFormatter
)
sub_parsers = parser.add_subparsers(help="ladder subcommands")

ensure_parser = sub_parsers.add_parser(
    "ensure",
    help="Ensure valid and correct project state",
    formatter_class=RawTextHelpFormatter,
    description="""
Like "ladder test", but runs all assurances of the project's validity and
correctness besides just unit and integration tests, including validation of
documentation and correction of optional features.

"ladder ensure" is exactly what is run by a CI to ensure correctness of patches
to the project. If "ladder ensure" passes locally, it _should_ pass on a CI.
"""
)
ensure_parser.set_defaults(handler=ensure)

test_parser = sub_parsers.add_parser(
    "test",
    help="Run slide tests",
    formatter_class=RawTextHelpFormatter,
    description="""
Runs slide tests using cargo. Arguments to the underlying "cargo test" runners
can be passed as extra flags on this command.

This command accepts an optional positional argument that serves as a test
filter. If no filter is specified, all tests are run.

To run only system tests, pass --sys.

Examples:

> ladder test                  # runs all tests
> ladder test --sys --bless    # runs all system tests and accepts their output
> ladder test --quiet          # runs `cargo test` in quiet mode
> ladder test add              # only runs tests with "add" in their name
"""
)
test_parser.add_argument(
    "filter",
    nargs="?",
    default=DEFAULTS.filter,
    help="""Optional test filter. If not specified, all tests are run."""
)
test_parser.add_argument(
    "--sys",
    action="store_true",
    default=DEFAULTS.sys,
    help="""Only run system tests."""
)
test_parser.add_argument(
    "-j", "--jobs",
    type=int,
    default=DEFAULTS.jobs,
    help="""The number of concurrent jobs (threads) that should be used to run the tests."""
)
test_parser.add_argument(
    "--bless",
    action="store_true",
    default=DEFAULTS.bless,
    help="""Accept the output of tests as new baselines.
This only affects system tests."""
)
test_parser.add_argument(
    "--fail-todo",
    action="store_true",
    default=DEFAULTS.bless,
    help="""Fail on tests with a @TODO annotation.
This only affects system tests."""
)
test_parser.add_argument(
    "--no-latex",
    action="store_true",
    default=DEFAULTS.no_latex,
    help="""Do not run LaTeX emit tests. This may speed up local execution.
This only affects system tests."""
)
test_parser.set_defaults(handler=test)

www_parser = sub_parsers.add_parser(
    "www",
    help="Start slide UI server",
    formatter_class=RawTextHelpFormatter,
    description=f"""
Start slide UI server at http://localhost:{UI_PORT}.

Compiles slide to wasm and spins up a server to host the static slide UI under.
This is useful for development; changes to slide are watched for recompilation,
and changes to the UI can be instantly refreshed.
"""
)
www_parser.set_defaults(handler=www)

bench_parser = sub_parsers.add_parser(
    "bench",
    help="Run slide benchmarks",
    formatter_class=RawTextHelpFormatter,
    description="""
Run libslide benchmarks using cargo.

This command accepts an optional positional argument that serves as a benchmark
filter. If no filter is specified, all benchmarks are run.
"""
)
bench_parser.add_argument(
    "filter",
    nargs="?",
    help="Optional benchmark filter. If not specified, all benchmarks are run."
)
bench_parser.set_defaults(handler=bench)

lf_parser = sub_parsers.add_parser("lf", help="Run lint and format checks")
lf_parser.set_defaults(handler=lf)

squash_parser = sub_parsers.add_parser(
    "squash",
    help="Squash commits ahead of master on this branch into one."
)
squash_parser.set_defaults(handler=squash)

doc_parser = sub_parsers.add_parser(
    "doc",
    help="Build and validate project documentation."
)
doc_parser.add_argument(
    "--open",
    action="store_true",
    default=DEFAULTS.open,
    help="""Open documentation in a browser."""
)
doc_parser.set_defaults(handler=doc)

# ~~~ Signals


def on_sigint(sig, frame):
    slide('Goodbye ):', file=sys.stderr)
    sys.exit(1)


signal.signal(signal.SIGINT, on_sigint)

# ~~~ Main

argv = sys.argv[1:]
if not argv:
    parser.print_help()
    sys.exit(1)
args, unknown = parser.parse_known_args(argv)
if ("handler" not in args):
    parser.print_help()
else:
    args.handler(args, unknown)
